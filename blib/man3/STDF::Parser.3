.\" Automatically generated by Pod::Man 2.22 (Pod::Simple 3.07)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\" ========================================================================
.\"
.IX Title "STDF::Parser 3"
.TH STDF::Parser 3 "2024-09-22" "perl v5.10.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
STDF::Parser \-   STDF::Parser to parse STDF Version 4 in pure Perl!
.SH "VERSION"
.IX Header "VERSION"
Version 0.01
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
Quick summary of what the module does.
.PP
.Vb 1
\& a little code snippet.
\&
\&    use STDF::Parser;
\&
\&    my $p = STDF::Parser\->new(stdf => $stdf_path);
\&    printf "CPU " , $p\->cpu_type, "\en";
\&    # iterate over records
\&
\&    while( my $rec = $p\->get_next_record()) {
\&      # $rec holds STDF record information
\&        my ($rec_name,@fields) = @$rec;
\&        if($rec_name eq "MIR") {
\&          ## @fields contain MIR fields 
\&        }
\&    }
\&    ...
.Ve
.SH "SUBROUTINES/METHODS"
.IX Header "SUBROUTINES/METHODS"
.SS "new (%hash)"
.IX Subsection "new (%hash)"
.Vb 2
\&     stdf  \- STDF file path or open file handle
\&             open file handle can be any IO::Handle object
\&
\&     exclude_records   \- array ref of record names or comma separated record names to exclude 
\&              any of the record in STDF in exclude_records will not be returned by parser
\&      
\&
\&     my $p = STDF::Parser\->new( stdf => $fh, exclude_records => \*(AqPTR,FTR,MPR\*(Aq);
\&     my $rec_stream = $p\->stream;
\&
\&     while( my $r = $rec_stream\->()) {
\&      ## this loop will not see excluded records PTR,FTR,MPR
\&     }
.Ve
.SS "close"
.IX Subsection "close"
close underlying file handle.
This method will not close if handle is not opened by this module
.SS "bytes_read"
.IX Subsection "bytes_read"
.Vb 1
\&  return current number of bytes from beginning of file
.Ve
.SS "current_record_num"
.IX Subsection "current_record_num"
.Vb 1
\&  return current record number
.Ve
.SS "cpu_type"
.IX Subsection "cpu_type"
.Vb 1
\&  return CPU type of STDF. Refer to STDF V4 spec
.Ve
.SS "stdf_ver"
.IX Subsection "stdf_ver"
.Vb 1
\&  return STDF version.
.Ve
.SS "stream"
.IX Subsection "stream"
.Vb 2
\&  return underlying STDF record stream which is a code ref.
\&  Call this code ref to retrieve next record.
\&
\&  $stream = $p\->stream;
\&  while( my $r = $stream\->() ) {
\&  
\&  }
.Ve
.SS "get_next_record"
.IX Subsection "get_next_record"
.Vb 7
\&  return next STDF record, undef for EOF
\&  return data type is array ref 
\&     [ REC_NAME, Field1,field2, ... fieldn]
\&  atomic value like U1,U2,I1,I2,I4,R4 occupy as one element of type Perl SCALAR in array
\&  C*n data type  translates to perl string
\&  array field value are encoded to array ref of respective type
\&  Unknown record type REC_NAME is \*(AqNA\*(Aq, follow by rec_typ,rec_sub, rec_body
.Ve
.ie n .SS "handle_unk_record This method is place holder for subclasses to override parser behavior for unknown record default implementation is to return [""\s-1NA\s0"",rec_typ,rec_sub,rec_body]"
.el .SS "handle_unk_record This method is place holder for subclasses to override parser behavior for unknown record default implementation is to return [``\s-1NA\s0'',rec_typ,rec_sub,rec_body]"
.IX Subsection "handle_unk_record This method is place holder for subclasses to override parser behavior for unknown record default implementation is to return [NA,rec_typ,rec_sub,rec_body]"
.SH "AUTHOR"
.IX Header "AUTHOR"
Nyan, \f(CW\*(C`<nyanhtootin at gmail.com>\*(C'\fR
.SH "BUGS"
.IX Header "BUGS"
Please report any bugs or feature requests to \f(CW\*(C`bug\-stdf\-parser at rt.cpan.org\*(C'\fR, or through
the web interface at <https://rt.cpan.org/NoAuth/ReportBug.html?Queue=STDF\-Parser>.  I will be notified, and then you'll
automatically be notified of progress on your bug as I make changes.
.SH "SUPPORT"
.IX Header "SUPPORT"
You can find documentation for this module with the perldoc command.
.PP
.Vb 1
\&    perldoc STDF::Parser
.Ve
.PP
You can also look for information at:
.IP "\(bu" 4
\&\s-1RT:\s0 \s-1CPAN\s0's request tracker (report bugs here)
.Sp
<https://rt.cpan.org/NoAuth/Bugs.html?Dist=STDF\-Parser>
.IP "\(bu" 4
\&\s-1CPAN\s0 Ratings
.Sp
<https://cpanratings.perl.org/d/STDF\-Parser>
.IP "\(bu" 4
Search \s-1CPAN\s0
.Sp
<https://metacpan.org/release/STDF\-Parser>
.SH "ACKNOWLEDGEMENTS"
.IX Header "ACKNOWLEDGEMENTS"
.SH "LICENSE AND COPYRIGHT"
.IX Header "LICENSE AND COPYRIGHT"
This software is Copyright (c) 2024 by Nyan.
.PP
This is free software, licensed under:
.PP
.Vb 1
\&  The Artistic License 2.0 (GPL Compatible)
.Ve
